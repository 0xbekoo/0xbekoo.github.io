<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>0xbekoo â€“ Router</title>
    <link>http://localhost:1313/tags/router/</link>
    <description>Recent content in Router on 0xbekoo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 03 Dec 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="http://localhost:1313/tags/router/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Router Firmware Reverse Engineering</title>
      <link>http://localhost:1313/blog/router-firmware-reversing/</link>
      <pubDate>Tue, 03 Dec 2024 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/router-firmware-reversing/</guid>
      <description>
        
        
        &lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/headerphoto.jpg&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Hello there. Welcome to my first blog for Firmware Reverse Engineering. In this post we will reverse the firmware of TP-Link&amp;rsquo;s &lt;a href=&#34;https://www.tp-link.com/us/home-networking/wifi-router/archer-ax21/&#34;&gt;Archer AX 21 V4.6&lt;/a&gt; modem. You can check TP-Link&amp;rsquo;s original page to &lt;a href=&#34;https://www.tp-link.com/us/support/download/archer-ax21/#Firmware&#34;&gt;download the firmware&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;hx-overflow-x-auto hx-mt-6 hx-flex hx-flex-col hx-rounded-lg hx-border hx-py-4 hx-px-4 contrast-more:hx-border-current contrast-more:dark:hx-border-current hx-border-amber-200 hx-bg-amber-100 hx-text-amber-900 dark:hx-border-amber-200/30 dark:hx-bg-amber-900/30 dark:hx-text-amber-200&#34;&gt;
  &lt;p class=&#34;hx-flex hx-items-center hx-font-medium&#34;&gt;&lt;svg height=16px class=&#34;hx-inline-block hx-align-middle hx-mr-2&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34; fill=&#34;none&#34; viewBox=&#34;0 0 24 24&#34; stroke-width=&#34;2&#34; stroke=&#34;currentColor&#34; aria-hidden=&#34;true&#34;&gt;&lt;path stroke-linecap=&#34;round&#34; stroke-linejoin=&#34;round&#34; d=&#34;M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z&#34;/&gt;&lt;/svg&gt;Warning&lt;/p&gt;

  &lt;div class=&#34;hx-w-full hx-min-w-0 hx-leading-7&#34;&gt;
    &lt;div class=&#34;hx-mt-6 hx-leading-7 first:hx-mt-0&#34;&gt;&lt;p&gt;The information shared in this blog is provided for security research and technical training purposes. It is not intended to cause any harm or malicious behavior towards the relevant company or its product.&lt;/p&gt;&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at the information of the firmware we downloaded:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/firmware-info.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, it was released on November 14, 2024. So it&amp;rsquo;s a firmware released almost 1 month ago. We can see that a few bugs have been fixed, optimizations have been made and new things have been added.&lt;/p&gt;
&lt;p&gt;Since I don&amp;rsquo;t physically own this router, I will only analyze the firmware in this blog.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Finding Linux Version&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;finding-linux-version&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-linux-version&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We will use a tool called binwalk, which is often used especially in firmware reverse engineering. This tool can provide us with various information about the firmware.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s give binwalk the firmware we are going to analyze:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img2.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Yeaap, we have some complicated outputs&amp;hellip;&lt;/p&gt;
&lt;p&gt;These outputs contain the offsets of the related firmware. However, this binwalk tool does not only give offset values, it also gives explanations for these fields. Let&amp;rsquo;s take a look at the Decimal and Hexdecimal values in this output:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img3.png&#34; style=&#34;width: 35%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;These are the offset values. binwalk tool shows them to us in both decimal and hexdecimal. Now let&amp;rsquo;s first focus on the Bootloader (U-Boot) and take a look at its architecture.&lt;/p&gt;
&lt;p&gt;At this stage we can use the dd tool. Let&amp;rsquo;s run the following command:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img4.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s pay attention to the values we give. with &amp;lsquo;if&amp;rsquo;, we give the target firmware. with &amp;lsquo;of&amp;rsquo;, we specify how to save the replicated data. with &amp;lsquo;skip&amp;rsquo;, we skip a certain amount of bytes and start the copying process. Notice that we gave a value of 8212. This means that dd will copy data up to 8212 bytes after the tool. This value is the offset of the uImage we found from binwalk.&lt;/p&gt;
&lt;p&gt;This copy will result in a file called uImage:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img5.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Analyzing the copied file we can verify that it is u-boot Legacy uImage. We can also see that arch is MIPS.&lt;/p&gt;
&lt;p&gt;To look for the Linux version, let&amp;rsquo;s take a look at our binwalk output again:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img2.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;If we look at the offsets again, we can go to the compressed partition with LZMA. Let&amp;rsquo;s take the file with the .lzma extension and extract the file:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img6.png&#34; style=&#34;width: 80%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;After these steps we should have a file as &lt;strong&gt;files&lt;/strong&gt;. Our goal will be to browse the Linux version with strings only:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img7.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;The Linux version used is 3.10.108 and 4.6.3 for GCC. Both of these are old versions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/738167/&#34;&gt;Linux version 3.10.108&lt;/a&gt; was released on November 5, 2017:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img8.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/gcc-4.6/&#34;&gt;Version 4.6.3 of GCC&lt;/a&gt; was released on March 1, 2012:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img9.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;To be honest, even though I am new to Firmware Reverse Engineering, I didn&amp;rsquo;t find it logical that a firmware released in 2024 would use an old Linux and GCC version. This could be a security risk.&lt;/p&gt;
&lt;p&gt;When I saw this, I asked myself: &amp;ldquo;Do other companies do this and is it normal?&amp;rdquo;. Although I didn&amp;rsquo;t think it was normal, I wanted to analyze a different company&amp;rsquo;s router firmware and compare it with the Linux version. After a short research, I decided to analyze ASUS&amp;rsquo;s RT-AX58U Router Firmware.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.asus.com/networking-iot-servers/wifi-6/all-series/rt-ax58u/helpdesk_bios?model2Name=RT-AX58U&#34;&gt;The information&lt;/a&gt; for this firmware is as follows:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img10.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Likewise, this Firmware was released almost 1 month ago. I will share the result I found quickly so that we don&amp;rsquo;t get distracted. But if you want to practice more, I recommend you to analyze this Firmware of ASUS Router like me after reading this blog:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img11.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;As a result, Linux version 4.19.183 and GCC version 9.2.0 are used for this firmware.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lwn.net/Articles/850356/&#34;&gt;Linux version 4.19.183&lt;/a&gt; was released on March 24, 2021:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img12.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://gcc.gnu.org/gcc-9/&#34;&gt;Version 9.2.0 of GCC&lt;/a&gt; was released on August 12, 2019&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img13.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;In this Firmware of the ASUS RT-AX58U we can see that it uses more recent versions compared to the TP-LINK Firmware we analyzed.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Finding Linux Files&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;finding-linux-files&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-linux-files&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s take a look again at the offset outputs we obtained with binwalk:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img2.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Here we can navigate to Squashfs to find Linux files. This is where most Linux files are located.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s copy them in the same way with the .sqfs extension:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img14.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;Analyzing the file we can verify that it is already compressed with Squashfs. Now we will need to extract it, but the Squashfs-tools package needs to be downloaded if it is not installed. On Debian systems you can download it with the following command:&lt;/p&gt;
&lt;div class=&#34;hextra-code-block hx-relative hx-mt-6 first:hx-mt-0 hx-group/code&#34;&gt;

&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo apt install squashfs-tools -y&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;hextra-code-copy-btn-container hx-opacity-0 hx-transition group-hover/code:hx-opacity-100 hx-flex hx-gap-1 hx-absolute hx-m-[11px] hx-right-0 hx-top-0&#34;&gt;
  &lt;button
    class=&#34;hextra-code-copy-btn hx-group/copybtn hx-transition-all active:hx-opacity-50 hx-bg-primary-700/5 hx-border hx-border-black/5 hx-text-gray-600 hover:hx-text-gray-900 hx-rounded-md hx-p-1.5 dark:hx-bg-primary-300/10 dark:hx-border-white/10 dark:hx-text-gray-400 dark:hover:hx-text-gray-50&#34;
    title=&#34;Copy code&#34;
  &gt;
    &lt;div class=&#34;copy-icon group-[.copied]/copybtn:hx-hidden hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
    &lt;div class=&#34;success-icon hx-hidden group-[.copied]/copybtn:hx-block hx-pointer-events-none hx-h-4 hx-w-4&#34;&gt;&lt;/div&gt;
  &lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After downloading, extract it with unsquashfs: command:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img15.png&#34; style=&#34;width: 80%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;After extraction we get a file named squashfs-root. Let&amp;rsquo;s take a look inside&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img16.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, we have accessed the Linux files. There are many things we can do in this section. You can search for a bug, hashes or passwords, whatever your analysis is based on. For example, we can take a look at the passwords in /etc/shadow:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img17.png&#34; style=&#34;width: 40%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;If you are new like me you can search for these Linux files and copy and browse other offset sections.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Simulating&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;simulating&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#simulating&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Finally, let&amp;rsquo;s emulate (simulate) the firmware. We can use chroot and qemu for this. But before that we need to know the architecture of the firmware.&lt;/p&gt;
&lt;p&gt;When we browsed uImage looking for the Linux version, we already saw that the architecture is MIPS. But let&amp;rsquo;s check the output one more time:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img5.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;We can see that it&amp;rsquo;s MIPS. It is also Little Endian.&lt;/p&gt;
&lt;p&gt;Since we are going to use Qemu, let&amp;rsquo;s copy /usr/bin/qemu-mipsel-static to squashfs-root and then run chroot:&lt;/p&gt;
&lt;div style=&#34;text-align: center;&#34;&gt;
  &lt;img src=&#34;http://localhost:1313/images/posts/reversing-router/img18.png&#34; style=&#34;width: 100%&#34; /&gt;
&lt;/div&gt;
&lt;p&gt;When we take a look at the version of Busybox, we see that 1.19.4 is used. This is an old version released in 2012.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In this blog, we discussed the fundamental steps of analyzing a router&amp;rsquo;s firmware, using a recently released TP-Link device as our case study. We demonstrated how to use common Linux tools like binwalk, dd, strings, and unsquashfs to dissect the firmware file, extract its core components like the kernel and the filesystem, and identify the software versions within.&lt;/p&gt;
&lt;p&gt;Our most striking discovery was that a firmware released in 2024 is built upon a Linux kernel from 2017 (3.10.108) and a GCC toolchain from 2012 (4.6.3). As our comparison with a more up-to-date ASUS firmware showed, this practice is a choice, not a necessity, and it represents a significant security liability. Such outdated components are often rife with known, unpatched vulnerabilities that could be exploited by attackers.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;span class=&#34;hx-absolute -hx-mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://embeddedbits.org/reverse-engineering-my-routers-firmware-with-binwalk-embeddedbits/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Embeddedbits - Reverse engineering my routerâ€™s firmware with binwalk&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zs86OYea8Wk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;John Hammond - Getting Started in Firmware Analysis &amp;amp; IoT Reverse Engineering&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oqk3cU7ekag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Engineer Man - Simple Firmware Reverse Engineering&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
