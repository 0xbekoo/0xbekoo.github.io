---
title: Introduction to UEFI
date: 2025-01-19
linkTitle: Introduction to UEFI
---

Merhabalar efenimm. UEFI Development'ın ilk bu dökümanında UEFI konusuna teorik olarak giriş yapacağız.

## **UEFI Nedir?**

**UEFI** (Unified Extensible Firmware Interface), bir bilgisayarın firmware'i için bir spesifikasyondur. Bilgisayarın güç tuşuna basıldığı ilk süreçlerde UEFI, işletim sistemi başlatılmadan önce çalışır. 

UEFI dediğimiz bu şeyi eski BIOS sistemin geliştirilmiş hali olduğunu düşünebiliriz. UEFI modelleri ayrıca donanıma etkileşim için temel I/O sistemlerine de sahiptir ancak sistem önyükleme işlemleri farklıdır. UEFI GPT (Guid Partition Table) kullanır. **GPT**, bir bilgisayarın depolama cihazındaki bölümlerin düzenini belirleyen ve modern yapısı olan bir standarttır. Hepimizin bildiği HDD veya SSD gibi cihazlarda kullanılan standarttır.  BIOS'un yerini alan UEFI gibi, GPT ise de önceden kullanılan MBR (Master Boot Record) bölümleme tablosunun yerini almıştır. GPT ile UEFI uyumlu çalışır. 

UEFI'nin avantajları şu şekildedir:

- 2TB veya daha büyük diskleri desteklemek
- Daha hızlı Booting İşlemi
- Eski BIOS'a kıyasla daha da basitleştirilmiş geliştirme sunma

Yani UEFI ve GPT'nin eski sistemlere kıyasla daha avantaj sunduğunu görebiliriz.

UEFI'in BIOS ile aynı görevleri vardır: I/O cihazlarını çalıştırmak ve kontrolü OS'a aktarmak. Fakat görevi sadece bununla sınırlı kalmayıp ve yukarıda anlattığım gibi, aynı zamanda işletim sistemi öncesi yani pre-OS geliştirme için geniş bir yelpaze sunar. 

Aşağıda gösterilen Legacy BIOS ve UEFI arasındaki farkı gösteren şemaya göz atalım:

![](../../../images/posts/introduction-to-uefi/img1.png)

Şemaya göz attığımızda BIOS, donanım ile doğrudan iletişim kuran bir firmware ve aynı zamanda bir donanımdır. Şemadan UEFI'ye göz attığımızda donanım ile işletim sisteminin arasındaki arayüzü birleştirdiğini görebiliriz. UEFI'nin bu işlevi, geliştiriciler için kolaylık sağlar.

Kısacası UEFI'ye göz attığımızda GPT ile beraber eski Legacy BIOS'a kıyasla daha modern ve hızlı bir süreç sunduğunu görmemiz mümkün.

## **UEFI Önyükleme Süreci**

UEFI bir bilgisayarın güç tuşuna bastıktan sonrasında logo görülmeden önce arka planda neler gerçekleştiğine bir de yakından göz atalım.

UEFI, platformun başlatılması sürecinde kritik öneme sahip **altı ana** önyükleme aşamasına sahiptir:

![](../../../images/posts/introduction-to-uefi/img2.png)

- **Security (SEC)**: Security aşaması, UEFI önyükleme sürecin ilk aşamasıdır. Genel amacı ise Geçici Bellek Deposunu başlatmak, Sistemde root of trust olarak hareket etmek ve Pre-EFI çekirdek aşamasına bilgi sağlamaktır. Bahsi geçen Root of Trust ise tam olarak şöyledir: SEC mekanizması ayrıca PI'da çalıştırılan herhangi bir kodun dijital olarak imzalanmasını sağlayan ve 'Secure Boot' ortamı yaratan bir mekanizma olarak da işlev görür.

- **Pre-EFI Initialization (PEI)**: İkinci aşamada, EFI kodunun çalışması sağlanır. Ana görevi ise bir sonraki aşama olan ve DXE sürücülerini başlatacak olan DXE Foundation'ı indirmektir. Ayrıca işlemci kaynaklarını kullanarak Pre-EFI Initialization Modules (PEIM)'leri dispatch etmekten sorumludur. Bu PEIM'ler, bazı kalıcı bellek tamamlayıcılarının başlatılması gibi kritik süreçlerden sorumlu olduğu gibi bir sonraki aşama olan Driver Execution Environment (DXE)'e geçişi sağlar.

- **Driver Execution Environment (DXE)**: Bu aşamanın gerçekten önemli olduğunu düşünüyorum çünkü sistemi başlatmak için gerekli büyük işlemler burada gerçekleşiyor. Bir önceki aşamada olan PEI'de, DXE'nin çalışması için gereken bellek tahsis edilir ve başlatılır. Artık kontroller DXE'e aktarılmasıyla **DXE Dispatcher** çağırılır. Bu Dispatcher, donanım sürücülerini, runtime hizmetlerini ve işletim sisteminin başlaması için gereken tüm önyükleme hizmetlerini yüklemesinden ve yürütmesinden sorumludur.  Amacımızı düşünürsek, önceden dediğim gibi burası bizim için önemli bir aşamadır. Çünkü geliştireceğimiz sürücü burada çalıştırılacaktır.

- **Boot Device Selection (BDS)**: DXE sürücüleri çalıştırılması ardından kontrol, muhtemelen hepinizin gördüğü BSD'ye aktarılır. Bu aşamada ise işletim sistemi yükleyicisinin hangi aygıtta aranacağına dair bir seçim yapılır. Ardından işletim sistemi yüklenmeye başlanır ve Transient System Load (TSL) aşamasına geçiş için hazırlanılır.

- **Transient System Load (TSL)**: Bu aşamada, seçilen önyükleme yükleyicisinin çalıştığı ve UEFI önyükleme hizmetlerinin sonlandırıldığı aşamadır.

- **Runtime (RT)**: Bu aşamada ise artık UEFI'nin akışı işletim sistemine devrediliyor. Fakat UEFI bu kısımdan itibaren tamamen ortadan kaybolduğu anlamına gelmez. UEFI'ye ait olan Runtime Services (Runtime Hizmetleri) işletim sistemini desteklemek için kullanılabilir durumda kalmaya devam eder. Bu Runtime hizmetleri, donanımla ilgili bazı özel işler için System Management Mode (SMM) devreye girer. SMM, işlemcinin kritik donanım işlevlerini işletim sisteminden bağımsız olarak yönettiği güvenli bir moddur. Örneğin, fan hızının ayarlanması veya batarya durumunun izlenmesi gibi işlemler bu modda yapılır. Eğer İşletim sistemi, donanımla ilgili bir işi kendi başına yapamazsa, **SMI** (System Management Interrupt) adı verilen bir sinyal gönderir. Bu, “yardım çağrısı” gibidir. Örneğin, işletim sistemi fan hızını kontrol etmek istediğinde bir SMI gönderir, SMM devreye girer ve bu işi halleder.

## **UEFI Development'a Giriş**

Gelelim önemli bu kısma. 

Söz konusu UEFI Development için kaynak olduğunda gerçekten bu süreçte kaynakların kısıtlı olduğunu göreceksiniz. Popüler olarak Development sürecinde, aşağıda sıralanan araçlar kullanılabilir:

### **Development için kullanılan Araçlar**

- **EDK2**: EDK2, UEFI ve PI spesifikasyonlar için modern, zengin ve platformlar arası kodlama gibi özelliklerine sahip bir araçtır. EDK2 projesi, UEFI spesifikasyonuna katkıda bulunan geliştiricilerin birçoğu tarafından (topluluk gönüllüleriyle birlikte) geliştirilmekte ve günümüzde sürdürülmektedir. Bu blog sürecinde ise kodlamayı bununla yapacağız.

EDK2'nin en son UEFI protokollerini içerdiğinden bu araç son derece yararlıdır. Buna ek olarak, öğrenme sürecinde rehber olarak kullanabileceğimiz projeler çok fazladır. 

- **VisualUEFI** VisualUEFI aracı, Windows kullanıcıları için Visual Studio IDE ile EDK2 projeleri geliştirmesine imkan veren bir araçtır. EDK2 projesinin karmaşık düzeninden kurtulmak ve rahat bir şekilde çalışmak isterseniz bu aracı tercih edebilirsiniz. 

Windows kullanıcısı olsam da bu blog sürecinde VisualUEFI'ye yer vermeyeceğim. VisualUEFI kodlama için rahat bir ortam sunsa da, benim için EDK2 gibi projelerin düzenini manuel olarak uğraşmak daha rahat oluyor. Eğer VisualUEFI'yi kurmak isterseniz internette birçok kaynak bulunmakta. 

### **Debugging için Araçlar**

Projelerimizi geliştirdikten sonra bunları analiz veya simüle etmemiz gerekecek. Aşağıda bunun için popüler olanları sıralıyorum:

- **QEMU**: QEMU'nun zaten ne olduğunu biliyorsunuzdur. Bir sanal makineden ziyade bir emülatör olması nedeniyle en iyi hata ayıklama olanaklarını sağlayan çok platformlu bir emülatör. Linux veya Windows ortamında bunu tercih edebilirsiniz. 

- **VMWare / VirtualBox**: Vmware, VirtualBox gibi sanal makineleri de tercih edebilirsiniz.

Bu süreçte ise simüle için VMWare'i tercih edeceğim. Özellikle VMware'in doğru çalışan NVRAM emülasyonu ile iyi performans sunar. Benim için en önemli sunduğu özellik ise Windows'ta TSL ve RT aşamalarında debugging için WinDbg ile güzel çalışması.

## **Windows'ta EDK2'nin Kurulumu**

EDK2 aracını kurmadan önce aşağıdaki araçları kurmamız lazım:

- **Git**
- **Python**
- **NASM**
- **Visual Studio (Windows Kullanıcıları için)**

Öncelikle git indirelim ve ardından Python'u indirelim. Python'u Microsoft Store yerine direkt olarak orijinal sitesinden indirin ve kurulumda ise aşağıda gösterilene dikkat edin:

![](../../../images/posts/introduction-to-uefi/img5.png)

İşaretlenmiş alandaki kutucukları işaretlemeyi unutmayın. 

Daha sonra NASM'ı orijinal sitesinden indirelim ve indirdiğimiz .exe dosyasını yönetici ile çalıştıralım:

![](../../../images/posts/introduction-to-uefi/img6.png)

Kurulum esnasında NASM projesinin lokasyonunu **C:\NASM** olarak ayarlayalım.

Visual Studio indirmek için Downloads sayfasından Build Tools araması yapalım:

![](../../../images/posts/introduction-to-uefi/img3.png)

**Tools for Visual Studio** olanı indirelim ve ardından:

![](../../../images/posts/introduction-to-uefi/img4.png)

Kurulumda **Desktop Development with C++** olanı seçelim ve kurulumu başlatalım.

Bunları tamamladıktan sonra **cmd.exe** açalım ve edk2 projesini klonlayalım:

```bash
git clone https://github.com/tianocore/edk2.git
cd edk2
git submodule update --init
```
## **References**

- [**Wikipedia - UEFI**](https://en.wikipedia.org/wiki/UEFI)
- [**Dabudabot - Beginning UEFI Development**](https://habr.com/en/companies/acronis/articles/535848/)
- [**Secret Club - Introduction to UEFI: Part 1**](https://secret.club/2020/05/26/introduction-to-uefi-part-1.html)
- [**Binary Ninja - Advanced UEFI Analysis with Binary Ninja**](https://binary.ninja/2024/08/23/uefi-firmware-analysis.html)
