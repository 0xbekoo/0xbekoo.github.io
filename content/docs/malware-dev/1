---
title: Direct Syscalls
date: 2024-12-30
authors:
  - name: imfing
    link: https://github.com/imfing
---

Merhabalar bu yazıda **Direct System Calls** konusuna değineceğiz. 

## **System Call Nedir?**

> [!IMPORTANT]
> Okuyucunun [NTAPI Injection](https://0xbekoo.github.io/docs/malware-dev/ntapi-injection/) blogunda anlatılan NTAPI mekanizması, user-mode ve kernel-mode arasındaki temel farklar gibi konularda bilgisi olduğu varsayılmıştır.

Direkt olarak tekniğe geçmeden önce syscall nedir bunu anlamamız gerekiyor.

Bir sistem çağrısı (system call), bir programın işletim sisteminden bir hizmet talep etmesinin programatik yoludur. Daha basit olarak, kullanıcı modunda (user mode) çalışan bir programın çekirdek moduna (kernel mode) geçmesini sağlayan bir komuttur. Windows gibi işletim sistemlerinde, kullanıcı modunda çalışan bir program, bir sistem çağrısı yaparak işletim sisteminin çekirdek modunda çalışan servislerine ulaşır. Bu geçiş, CPU'nun işletim sistemi tarafından yönetilen çekirdek moduna geçmesiyle gerçekleşir.

Söz konusu Windows API olduğunda, bir user-mode program tarafından çağırılan WIN32 API'in çalıştırılması için user-mode alanından kernel-mode alana geçici geçişi (geçiş CPU anahtarı) sağlayan bir komuttur.

Kafanıza daha iyi oturması için diyagram üzerinden ilerleyelim:

![](../../../images/posts/direct-syscalls/diagram.png)

**NTAPI Injection** blogumu okuduysanız bu diyagram yabancı gelmeyecektir. Fakat yine de özet geçmekte fayda var. 

Diyelim ki user-mode programdan OpenProcess API'i çağırdık. Bu API'ların orijinal adresleri kernel alanından **ntoskrnl.exe**'de tutulduğu için user-mode alanından kernel-mode'a yönlendirilmesi gerekiyor. Bu API'in ilk durağı kernel32.dll alanından OpenProcess olacaktır ve sonra user-mode alanın son durağı olan ntdll.dll kütüphanesine giderek **NtOpenProcess** haline dönüşür. Konumuzilgisi olan **SYSCALL** tam burada devreye giriyor. ntdll.dll'den sonra adımlar kernel alanından devam edeceği için kernel-mode alana yönlendirilmesi gerekiyor.

SYSCALL çalıştıktan sonra ise kernel-mode alana geçiş yapılarak SSDT tablosuna yönlendirilir **NtOpenProcess**'in orijinal adresi hesaplanır ve ntoskrnl.exe'den adrese yönlendirilir. Eğer SSDT tablosu hakkında bilgi sahibi olmak isterseniz [SSDT bloguma](https://0xbekoo.github.io/docs/winkernel-dev/wkd-ssdt/) göz atabilirsiniz.

## **Direct Systemcall Yöntemi Nedir?**

Direct Systemcall yöntemi, adından da anlaşılabileceği gibi, user-mode programlardan doğrudan syscall yapmayı içeren bir tekniktir. Bu yöntem, arada herhangi bir kütüphaneye (şemadan gördüğümüz gibi kernel32.dll vs.) gitmeden, doğrudan syscall yapılır. 

Yıllar geçse de sıkılmayacağımız örnek olan NtOpenProcess'i kullanarak bir syscall yapan örnek yapalım. Kafamıza daha iyi oturacaktır. 

## **References**

- [Wikipedia - System Call](https://en.wikipedia.org/wiki/System_call#:~:text=In%20computing%2C%20a%20system%20call,on%20which%20it%20is%20executed.)

- [REDOPS - Direct Syscalls: A journey from high to low](https://redops.at/en/blog/direct-syscalls-a-journey-from-high-to-low)

